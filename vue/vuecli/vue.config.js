/* eslint-disable semi */
module.exports = {
  // Type: string
  // Default: '/'
  //
  //  By default, Vue CLI assumes your app will be deployed at the root of a domain,
  // e.g. https://www.my-app.com/. If your app is deployed at a sub-path,
  // you will need to specify that sub-path using this option.
  //  For example, if your app is deployed at https://www.foobar.com/my-app/, set publicPath to '/my-app/'.
  //
  //  The value can also be set to an empty string ('') or a relative path (./) so that all assets are
  // linked using relative paths. This allows the built bundle to be deployed under any public path,
  // or used in a file system based environment like a Cordova hybrid app.
  publicPath: '/',

  // Type: string
  // Default: 'dist'
  //
  //  The directory where the production build files will be generated in when running
  // vue-cli-service build. Note the target directory will be removed before
  // building (this behavior can be disabled by passing --no-clean when building).
  outputDir: 'dist',

  // Type: string
  // Default: ''
  //
  //  A directory (relative to outputDir) to nest generated static assets (js, css, img, fonts) under.
  assetsDir: '',

  // Type: string
  // Default: 'index.html'
  //
  //  Specify the output path for the generated index.html (relative to outputDir).
  // Can also be an absolute path.
  indexPath: 'index.html',

  // Type: boolean
  // Default: true
  //
  //  By default, generated static assets contains hashes in their filenames for better
  // caching control. However, this requires the index HTML to be auto-generated by Vue CLI.
  // If you cannot make use of the index HTML generated by Vue CLI, you can disable filename
  // hashing by setting this option to false.
  filenameHashing: true,

  // Type: Object
  // Default: undefined
  //
  // Build the app in multi-page mode. Each "page" should have a corresponding JavaScript entry file.
  // The value should be an object where the key is the name of the entry, and the value is either:
  //    - An object that specifies its entry, template, filename, title and chunks (all optional except
  //      entry). Any other properties added beside those will also be passed directly to
  //      html-webpack-plugin, allowing user to customize said plugin;
  //    - Or a string specifying its entry.
  //      module.exports = {
  //        pages: {
  //          index: {
  //            // entry for the page
  //            entry: 'src/index/main.js',
  //            // the source template
  //            template: 'public/index.html',
  //            // output as dist/index.html
  //            filename: 'index.html',
  //            // when using title option,
  //            // template title tag needs to be <title><%= htmlWebpackPlugin.options.title %></title>
  //            title: 'Index Page',
  //            // chunks to include on this page, by default includes
  //            // extracted common chunks and vendor chunks.
  //            chunks: ['chunk-vendors', 'chunk-common', 'index']
  //          },
  //        // when using the entry-only string format,
  //        // template is inferred to be `public/subpage.html`
  //        // and falls back to `public/index.html` if not found.
  //        // Output filename is inferred to be `subpage.html`.
  //        subpage: 'src/subpage/main.js'
  //      }
  //    }
  pages: undefined,

  //  Whether to perform lint-on-save during development using eslint-loader.
  // This value is respected only when @vue/cli-plugin-eslint is installed. When set to true or 'warning',
  // eslint-loader will emit lint errors as warnings.By default, warnings are only logged to the terminal
  // and does not fail the compilation, so this is a good default for development.
  //
  //  To make lint errors show up in the browser overlay, you can use lintOnSave: 'default'.
  // This will force eslint-loader to actually emit errors.this also means lint errors will now
  // cause the compilation to fail.
  //
  //  Setting it to 'error' will force eslint-loader to emit warnings as errors as well, which means
  // warnings will also show up in the overlay.
  //
  //  Alternatively, you can configure the overlay to display both warnings and errors:
  //    module.exports = {
  //      devServer: {
  //        overlay: {
  //          warnings: true,
  //          errors: true
  //        }
  //      }
  //    }
  //
  //  When lintOnSave is a truthy value, eslint-loader will be applied in both development and production.
  // If you want to disable eslint-loader during production build, you can use the following config:
  //    module.exports = {
  //      lintOnSave: process.env.NODE_ENV !== 'production'
  //    }
  lintOnSave: true,

  //  Whether to use the build of Vue core that includes the runtime compiler. Setting it to true
  // will allow you to use the template option in Vue components, but will incur around an extra
  // 10kb payload for your app.
  // See also: https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only
  runtimeCompiler: false,

  //  By default babel-loader ignores all files inside node_modules.If you want to explicitly
  // transpile a dependency with Babel, you can list it in this option.
  transpileDependencies: [],

  // Setting this to false can speed up production builds if you don't need source maps for production
  productionSourceMap: true,

  //  Configure the crossorigin attribute on <link rel="stylesheet"> and <script> tags in generated HTML.
  // Note that this only affects tags injected by html- webpack - plugin - tags directly added in the
  // source template(public/index.html) are not affected.
  crossorigin: undefined,

  //  Set to true to enable Subresource Integrity (SRI) on <link rel="stylesheet"> and <script> tags
  // in generated HTML. If you are hosting your built files on a CDN, it is a good idea to enable this
  // for additional security.
  //
  //  Note that this only affects tags injected by html- webpack - plugin - tags directly added in the
  // source template(public/index.html) are not affected.

  //  Also, when SRI is enabled, preload resource hints are disabled due to a bug in Chrome which causes
  // the resources to be downloaded twice
  integrity: false,

  // If the value is an Object, it will be merged into the final config using webpack-merge.
  // See also: https://github.com/survivejs/webpack-merge
  //
  // If the value is a function, it will receive the resolved config as the argument.The function can
  // either mutate the config and return nothing, OR return a cloned or merged version of the config.
  // See also: https://cli.vuejs.org/guide/webpack.html#simple-configuration
  configureWebpack: config => {
    config.resolve.alias = Object.assign({
      common: './src/common.ts'
    }, config.resolve.alias);

    config.entry = Object.assign({
      vendor: ['vue', /* 'view-design', */'common']
    }, config.entry);
  },

  //  A function that will receive an instance of ChainableConfig powered by webpack-chain.
  // Allows for more fine-grained modification of the internal webpack config.
  // See also: https://github.com/mozilla-neutrino/webpack-chain
  //           https://cli.vuejs.org/guide/webpack.html#chaining-advanced
  chainWebpack: config => {
    // config.module
    //   .rule('i18n')
    //   .resourceQuery(/blockType=i18n/)
    //   .type('javascript/auto')
    //   .use('i18n')
    //   .loader('@kazupon/vue-i18n-loader')
    //   .end()
  },

  css: {
    //  By default, only files that ends in *.module.[ext] are treated as CSS modules.
    // Setting this to false will allow you to drop .module in the filenames and treat
    // all *.(css|scss|sass|less|styl(us)?) files as CSS modules.
    // See also: https://cli.vuejs.org/guide/css.html#css-modules
    requireModuleExtension: true,

    //
    //
    //
    extract: process.env.NODE_ENV === 'production'
  },

  pluginOptions: {
    i18n: {
      locale: 'en',
      fallbackLocale: 'zh-CN',
      localeDir: 'locales',
      enableInSFC: true
    }
  }
}

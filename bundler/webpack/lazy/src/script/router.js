/* eslint-disable no-underscore-dangle */

import { forEach as _forEach, keys as _keys } from 'lodash-es';

/**
 * the root html element, new elements must be appended into it
 */
let _$root = null;

/**
 * the route table, mapping the navigate pathname to executable script
 *
 * each route object in this table has the type:
 * {
 *    title: required, string, inner text of <title> element
 *    href: required, string, the pathname of route
 *    module: required, function, return a Promise object to import the target script
 *    context: optional, object, the context or state object to keep in "window.history"
 * }
 */
let _routes = {};

/**
 * jump to target view by render by "init" function in imported script
 *
 * the "init" function defined like this
 *    function init() => Element {}
 *
 * @param {Object} r a router object
 */
function _jumpTo(r) {
  // push give href into top of the history stack
  window.history.pushState(r.context || {}, r.title || {}, r.href);

  // run "module" function, import the module
  const m = r.module();

  // do something after module has been imported
  // import "init" function from module
  m.then(({ default: init }) => {
    // render html by call "init" function
    render(init());
  });

  // change html title
  if (r.title) {
    document.querySelector('html>head>title').innerText = r.title;
  }
}

/**
 * reload current page by current "window.location"
 */
function _reload() {
  let found = false;

  // traverse the routing table, find which route object should match current pathname and jump to it
  _forEach(_keys(_routes || {}), key => {
    const it = _routes[key];
    const pathname = window.location.pathname || '/';
    if (it && it.href === pathname) {
      _jumpTo(it);
      found = true;
    }
  });

  // no route object was matched, jump to 404
  if (!found) {
    jumpTo('404');
  }
}

/**
 * render the view by given html element
 *
 * @param {Element} $h html element is generated by execute imported script
 */
function render($h) {
  if (_$root && $h) {
    _$root.innerHTML = '';  // empty the container element
    _$root.appendChild($h); // append generated element into container element
  }
}

/**
 * make "menu", save "view root element" and record the "route table"
 *
 * @param {Element} $root
 * @param {Element} $nav
 * @param {Object} routes
 */
export function route($root, $nav, routes) {
  // create top element for menu
  const $ul = document.createElement('ul');
  $ul.className = 'menu-bar';

  // traverse route table to create menu item and add "click" event handler for it
  _forEach(_keys(routes), key => {
    const it = routes[key];
    if (it.menu !== 'hidden') {   // test this route object if can display on menu
      const $li = document.createElement('li');
      const $a = document.createElement('a');
      $li.appendChild($a);

      $a.innerText = it.title;
      // eslint-disable-next-line no-script-url
      $a.href = 'javascript:;';

      // add "click" event handler, to jump to the target view
      $a.addEventListener('click', () => _jumpTo(it), false);
      $ul.appendChild($li);
    }
  });
  $nav.appendChild($ul);

  // record given things
  _$root = $root;
  _routes = routes || [];
}

/**
 * jump to target view by given route name
 *
 * @param {*} name route name
 */
export function jumpTo(name) {
  const r = _routes[name] || '404';
  _jumpTo(r);
}

// jump once when page was loaded
window.addEventListener('load', _reload);

// jump once when history is go back
window.addEventListener('popstate', _reload);
